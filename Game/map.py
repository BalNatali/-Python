from utils import randbool #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–æ–π –º–µ—Ç–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ utils.py
from utils import randcell #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–æ–π –º–µ—Ç–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ utils.py
from utils import randcell2 #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–æ–π –º–µ—Ç–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ utils.py



#0 - –ø–æ–ª–µ
#1 - –¥–µ—Ä–µ–≤–æ
#2 - —Ä–µ–∫–∞
#3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
#4 - –º–∞–≥–∞–∑–∏–Ω
#5 - –æ–≥–æ–Ω—å


CELL_TYPES= "üü©üå≤üåäüè•üè™üî•" #–∫–∞—Å–ø–æ–º –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–Ω—Ç—ã, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è

TREE_BONUS = 100 #—Å–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –¥–∞—ë–º –∑–∞ –ø–æ—Ç—É—à–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
UPGRADE_COST = 5000 #—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞ –¥–ª—è –≤–æ–¥—ã (+1)
LIFE_COST = 1000

class Map: #—Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É. —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –Ω–∞ –∑–µ–º–ª–µ
    def __init__(self, w, h): #–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å –¥–ª–∏–Ω–æ–π –∏ —à–∏—Ä–∏–Ω–æ–π
    #—Ä—è–¥—ã h –∏ w - –∫–ª–µ—Ç–∫–∏
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)]for j in range(h)]
        self.generate_forest(5, 10)
        self.generate_river(10)
        self.generate_river(10)
        self.generate_upgrade_shop()
        self.generate_hospital ()
        
    def check_bounds (self, x, y): #–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–∞—à–µ–º—É –ø–æ–ª—é, –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç x –∏ y - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
        #–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0,0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–µ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–ª–µ—Ç–∫–µ
        if ((x < 0) or (y < 0) or (x >= self.h) or (y >= self.w)):
            return False
        return True      

    def print_map (self, helico, clouds): #–≤—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É
        print("‚¨õ" * (self.w + 2))
        for ri in range (self.h): #row –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ cells, —Ç.–µ. –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—è–¥–∞
            print("‚¨õ", end="")
            for ci in range (self.w): #–ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–ª–µ—Ç–∫–∞–º —Å –ø–æ–º–æ—â—å—é cell
                cell = self.cells[ri][ci]
                if (clouds.cells [ri][ci] == 1):
                    print("‚ö™Ô∏è", end = "")
                elif (clouds.cells [ri][ci] == 2):
                    print("‚òîÔ∏è", end = "")
                elif (helico.x == ri and helico.y == ci):
                    print("üöÅ", end = "")
                elif (cell >= 0 and cell < len(CELL_TYPES)):  #—á—Ç–æ –±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–æ–∫–∏ (CELL_TYPES)
                    print(CELL_TYPES [cell], end="") # –ø–∏—à–µ–º end="" —á—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
            print("‚¨õ")
        print("‚¨õ" * (self.w + 2))            
#            print() #–ø—É—Å—Ç–æ–π print –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏     

    def generate_river (self, l): #–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è –¥–ª–∏–Ω–æ–π —Ä–µ–∫–∏ (—Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º)
        rc = randcell (self.w , self.h) #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ–∫ (–æ—Ç–∫—É–¥–∞ –Ω–∞—á–Ω—ë—Ç —Ç–µ—á—å —Ä–µ–∫–∞)
        rx, ry = rc[0], rc[1]
        self.cells[rx][ry] = 2
        while l > 0: #—Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É, –ø–æ–∫–∞ –Ω–µ –∏–∑—Ä–∞—Å—Ö–æ–¥—É–µ–º –≤—Å—é –¥–ª–∏–Ω—É —Ä–µ–∫–∏
            rc2 = randcell2 (rx, ry)
            rx2, ry2 = rc2[0], rc2[1]
            if (self.check_bounds(rx2, ry2)): #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–ª–µ—Ç–∫–∏ –∫ –ø–æ–ª—é
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry2
                l -= 1

    def generate_forest (self, r, mxr): #–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–µ—Å–æ–≤, –ø–∏—à–µ–º —Ä–∞—Å—à–∏—Ä—è–µ–º–æ, —á—Ç–æ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
         #–ø–µ—Ä–µ–¥–∞—ë–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é 2 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: 1(mxr) - –¥–∏–∞–ø–æ–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–∞, 2(r) - –æ—Ç—Å–µ—á–∫–∞, –æ—Ç—Å–µ–∫–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞—à–µ —á–∏—Å–ª–æ
        for ri in range (self.h):
            for ci in range (self.w):
                #–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—â –º–µ—Ç–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ utils.py
                if randbool (r, mxr):
                    self.cells[ri][ci] = 1 #—Å—Ç–∞–≤–∏–º –¥–µ—Ä–µ–≤–æ

    def generate_tree(self): #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–ª–µ—Ç–∫—É –∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞, —Ç–æ —Å—Ç–∞–≤–∏–º —Ç—É–¥–∞ –¥–µ—Ä–µ–≤–æ, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞. —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        c = randcell(self.w, self.h) #–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–∞ –ø–æ–ª–µ
        cx, cy = c[0], c[1]
        if (self.cells [cx][cy] == 0): #–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞
            self.cells[cx][cy] = 1 # —Å—Ç–∞–≤–∏–º –¥–µ—Ä–µ–≤–æ –Ω–∞ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É

    def generate_upgrade_shop (self): #—Å–æ–∑–¥–∞—ë–º –º–∞–≥–∞–∑–∏–Ω
        c = randcell (self.w, self.h) #–±–µ—Ä—ë–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–ª–µ—Ç–∫—É –∏ —Å—Ç–∞–≤–∏–º –≤ –Ω–µ—ë –º–∞–≥–∞–∑–∏–Ω
        cx, cy = c[0], c[1]
        self.cells[cx][cy] = 4

    def generate_hospital (self): #—Å–æ–∑–¥–∞—ë–º –º–∞–≥–∞–∑–∏–Ω
        c = randcell (self.w, self.h) #–±–µ—Ä—ë–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–ª–µ—Ç–∫—É –∏ —Å—Ç–∞–≤–∏–º –≤ –Ω–µ—ë –º–∞–≥–∞–∑–∏–Ω
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] != 4: #–µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–µ 4 (—É –Ω–∞—Å –Ω–µ —Å—Ç–æ–∏—Ç —Ç–∞–º —É–∂–µ –º–∞–≥–∞–∑–∏–Ω, —Ç–æ —Å—Ç–∞–≤–∏–º –≥–æ—Å–ø–∏—Ç–∞–ª—å, –∏–Ω–∞—á–µ –∏—â–µ–º –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ)
            self.cells[cx][cy] = 3
        else:
            self.generate_hospital()

    def add_fire(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1] #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–ª–µ—Ç–∫—É
        if self.cells [cx][cy] == 1: #–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ –∫–ª–µ—Ç–∫–µ —É–∂–µ –µ—Å—Ç—å –¥–µ—Ä–µ–≤–æ 
            self.cells[cx][cy] = 5 #—Å—Ç–∞–≤–∏–º –æ–≥–æ–Ω—å

    def update_fires (self, helico):
        for ri in range (self.h):
            for ci in range (self.w):
                cell = self.cells[ri][ci]
                if cell == 5:
                    self.cells[ri][ci] = 0 #–≤–º–µ—Å—Ç–æ –æ–≥–Ω—è —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, —Ç–∞–∫ –∫–∞–∫ –¥–µ—Ä–µ–≤–æ —É–∂–µ —Å–≥–æ—Ä–µ–ª–æ
                    helico.score -= TREE_BONUS
        for i in range (10):
            self.add_fire()

    def process_helicopter (self, helico, clouds): #–∑–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä —Å –≤–æ–¥–æ–π –∏–∑ —Ä–µ–∫–∏
        c = self.cells[helico.x][helico.y]
        d = clouds.cells[helico.x][helico.y]
        if (c == 2):
            helico.tank = helico.mxtank #–ø–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –æ—Ç —Ä–µ–∫–∏ –ø–æ –º–∞–∫—Å–∏–º—É–º—É
        if (c == 5 and helico.tank > 0): #—Ç—É—à–∏–º –ø–æ–∂–∞—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            helico.tank -= 1
            helico.score += TREE_BONUS #–¥–∞—ë–º –æ—á–∫–∏ –∑–∞ —Å–ø–∞—Å–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            self.cells[helico.x][helico.y] = 1
        if (c==4 and helico.score >= UPGRADE_COST):
            helico.mxtank += 1
            helico.score -= UPGRADE_COST
        if (c==3 and helico.score >= LIFE_COST):
            helico.lives += 10
            helico.score -= LIFE_COST
        if (d == 2):
            helico.lives -= 1
            if (helico.lives == 0): #–∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ø—Ä–æ–∏–≥—Ä—ã—à
                helico.game_over()

    def export_data (self):
        return {"cells": self.cells}
    
    def import_data (self, data):
        self.cells = data ["cells"] or [[0 for i in range(self.w)] for j in range(self.h)]